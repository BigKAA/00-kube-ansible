---
- name: Remove repository kubernetes RedHat
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.yum_repository:
    name: kubernetes
    state: absent

- name: Remove repository kubernetes Ubuntu
  when: ansible_facts['os_family'] == "Debian"
  ansible.builtin.apt:
    name: kubernetes
    state: absent

- name: Remove CRI-O repository RedHat
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.yum_repository:
    name: cri-o
    state: absent

- name: Remove CRI-O repository Ubuntu
  when: ansible_facts['os_family'] == "Debian"
  ansible.builtin.apt:
    name: cri-o
    state: absent

- name: Remove docker repository RedHat
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.yum_repository:
    name: docker
    state: absent

- name: Remove docker repository Ubuntu
  when: ansible_facts['os_family'] == "Debian"
  ansible.builtin.apt:
    name: docker
    state: absent

- name: Add CRI-O repository Ubuntu key
  when: ansible_facts['os_family'] == "Debian" and cri == "crio"
  ansible.builtin.apt_key:
    url: "https://pkgs.k8s.io/addons:/cri-o:/{{ stage }}:/{{ crio_version }}/deb/Release.key"
    state: present
    keyring: /etc/apt/trusted.gpg.d/crio.gpg

- name: Add CRI-O repository Ubuntu
  when: ansible_facts['os_family'] == "Debian" and cri == "crio"
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/crio.gpg arch={{ ansible_architecture }}] https://pkgs.k8s.io/addons:/cri-o:/{{ stage }}:/{{ crio_version }}/deb/ {{ ansible_distribution_release }} stable"
    state: present
    filename: "cri-o"
    update_cache: true

- name: Add CRI-O repository RedHat
  when: ansible_facts['os_family'] == "RedHat" and cri == "crio"
  ansible.builtin.yum_repository:
    name: cri-o
    description: CRI-O repository for version {{ crio_version }}
    baseurl: https://pkgs.k8s.io/addons:/cri-o:/{{ stage }}:/{{ crio_version }}/rpm/
    gpgcheck: true
    enabled: true
    gpgkey:
      - https://pkgs.k8s.io/addons:/cri-o:/{{ stage }}:/{{ crio_version }}/rpm/repodata/repomd.xml.key
    state: present

- name: Docker repository for containerd RedHat
  when: ansible_facts['os_family'] == "RedHat" and cri == "containerd"
  ansible.builtin.yum_repository:
    name: docker
    enabled: true
    baseurl: "https://download.docker.com/linux/centos/$releasever/$basearch/stable"
    description: 'Docker'
    gpgcheck: true
    gpgkey:
      - 'https://download.docker.com/linux/centos/gpg'

- name: Docker repository for Ubuntu [Key]
  when: ansible_facts['os_family'] == "Debian" and cri == "containerd"
  ansible.builtin.apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present
    keyring: /etc/apt/trusted.gpg.d/docker.gpg

- name: Docker repository for Ubuntu
  when: ansible_facts['os_family'] == "Debian" and cri == "containerd"
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present
    filename: docker

- name: K8s repository for Ubuntu [Key]
  when: ansible_facts['os_family'] == "Debian" and cri == "containerd"
  ansible.builtin.apt_key:
    url: "https://pkgs.k8s.io/core:/stable:/v{{ kube_version | regex_search('[0-9]+.[0-9]+') }}/deb/Release.key"
    state: present
    keyring: /etc/apt/trusted.gpg.d/k8s.gpg

- name: K8s repository for Ubuntu
  when: ansible_facts['os_family'] == "Debian" and cri == "containerd"
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/trusted.gpg.d/k8s.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kube_version | regex_search('[0-9]+.[0-9]+') }}/deb/ /"
    state: present
    filename: kubernetes

- name: Add kubernetes repository RedHat
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.yum_repository:
    name: kubernetes
    description: "Base programs for k8s, version: v{{ kube_version[:4] }}"
    baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kube_version[:4] }}/rpm/"
    gpgcheck: true
    enabled: true
    gpgkey:
      - "https://pkgs.k8s.io/core:/stable:/v{{ kube_version[:4] }}/rpm/repodata/repomd.xml.key"
    state: present

- name: Install packages dnf
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.dnf:
    name:
      - net-tools
      - mc
      - iproute-tc
      - vim
      - git
      - bash-completion
      - nfs-utils
      - tar
      - rsyslog
      - chrony
      - jq
      - kubectl
      - kubelet
      - kubeadm
      - ipvsadm
    state: present

- name: Install packages apt
  when: ansible_facts['os_family'] == "Debian"
  ansible.builtin.apt:
    pkg:
      - net-tools
      - mc
      - iproute2
      - iptables
      - vim
      - git
      - bash-completion
      - nfs-common
      - tar
      - rsyslog
      - chrony
      - jq
      - kubectl
      - kubelet
      - kubeadm
      - ipvsadm
    state: present

- name: Install CRI-O rpm
  when: ansible_facts['os_family'] == "RedHat" and cri == "crio"
  ansible.builtin.dnf:
    name:
      - cri-o
      - cri-tools
    state: present

- name: Install CRI-O deb
  when: ansible_facts['os_family'] == "Debian" and cri == "crio"
  ansible.builtin.apt:
    name:
      - cri-o
    state: present

- name: Install containerd rpm
  when: ansible_facts['os_family'] == "RedHat" and cri == "containerd"
  ansible.builtin.dnf:
    name:
      - containerd
    state: present

- name: Install containerd deb
  when: ansible_facts['os_family'] == "Debian" and cri == "containerd"
  ansible.builtin.apt:
    name:
      - containerd
    state: present

- name: Enable NTP server
  ansible.builtin.service:
    name: chronyd
    state: started
    enabled: true

- name: Enable rsyslog
  ansible.builtin.service:
    name: rsyslog
    state: started
    enabled: true

- name: Disable firewalld
  when: ansible_facts['os_family'] == "RedHat"
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false

- name: Test swap
  ansible.builtin.shell: "swapon --show --noheadings | wc -l"
  register: swap_ret

- name: If swap is enabled - disable it
  ansible.builtin.command: swapoff -a
  when: swap_ret.stdout != "0"

- name: Disable SWAP in fstab
  when: swap_ret.stdout != "0"
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\s*swap\s*.*)$'
    replace: '# \1'

- name: Check Disable SELinux
  when: ansible_facts['os_family'] == "RedHat"
  ansible.posix.selinux:
    state: disabled
  register: selinux_ret

- name: Setenforce 0
  when: ansible_facts['os_family'] == "RedHat" and selinux_ret.changed 
  ansible.builtin.command:
    cmd: setenforce 0

- name: Enable dockerhub mirror on containerd [mkdir]
  when: cri == "containerd"
  ansible.builtin.file:
    path: /etc/containerd/certs.d
    state: directory
    mode: u=rw,g=r,o=r

- name: Enable dockerhub mirror on containerd [mkdir]
  when: cri == "containerd" and dockerhubMirror is true
  ansible.builtin.file:
    path: /etc/containerd/certs.d/docker.io
    state: directory
    mode: u=rw,g=r,o=r

- name: Enable dockerhub mirror on containerd [file]
  when: cri == "containerd" and dockerhubMirror is true
  ansible.builtin.template:
    src: hosts.j2
    dest: /etc/containerd/certs.d/docker.io/hosts.toml
    owner: root
    mode: u=rw,g=r,o=r

- name: Set containerd config.toml
  when: cri == "containerd"
  ansible.builtin.copy:
    src: config.toml
    dest: /etc/containerd/config.toml
    owner: root
    mode: u=rw,g=r,o=r

# # - name: Delete config.toml file
# #   when: cri == "containerd"
# #   ansible.builtin.file:
# #     path: /etc/containerd/config.toml
# #     state: absent

- name: Enable and start Containerd service
  when: cri == "containerd"
  ansible.builtin.service:
    name: containerd
    state: started
    enabled: true

- name: Enable dockerhub mirror on CRI-O
  when: cri == "crio" and dockerhubMirror is true
  ansible.builtin.template:
    src: cri-o-mirrors.j2
    dest: /etc/crio/crio.conf.d/10-dockerhub-mirror.conf
    owner: root
    mode: u=rw,g=r,o=r

- name: Enable and start CRI-O service
  when: ansible_facts['os_family'] == "RedHat" and cri == "crio"
  ansible.builtin.service:
    name: crio
    state: started
    enabled: true

- name: Set crictl.yaml
  ansible.builtin.template:
    src: crictl.j2
    dest: /etc/crictl.yaml
    owner: root
    mode: u=rw,g=r,o=r

- name: Load modules
  community.general.modprobe:
    name: br_netfilter

- name: Load module permanet
  ansible.builtin.copy:
    src: modules-kubernetes.conf
    dest: /etc/modules-load.d/modules-kubernetes.conf
    owner: root
    mode: u=rw,g=r,o=r

- name: Set Sysctl on all nodes
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - name: net.ipv4.ip_forward
      value: 1
    - name: net.bridge.bridge-nf-call-iptables
      value: 1
    - name: net.bridge.bridge-nf-call-ip6tables
      value: 1
    - name: vm.max_map_count # for opensearch & elasticserarch
      value: 262144

# - name: Set Sysctl on master node(s)
#   when: inventory_hostname in groups['k8s_masters']
#   ansible.posix.sysctl:
#     name: "{{ item.name }}"
#     value: "{{ item.value }}"
#     state: present
#   with_items:
#     - name: net.ipv4.ip_nonlocal_bind
#       value: 1

- name: Add PS1
  ansible.builtin.lineinfile:
    path: ~/.bashrc
    state: present
    line: "PS1='\\[\\e[44;36m\\]\\t:[\\w]\\[\\e[0;0m\\]\\n\\[\\e[0;31;04m\\]\\u\\[\\e[0;0m\\]@\\[\\e[0;32m\\]\\h\\[\\e[0;0m\\] \\$ '"

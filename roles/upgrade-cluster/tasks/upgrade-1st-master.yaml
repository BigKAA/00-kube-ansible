- name: Get current version of 1-st master
  shell:
    cmd: "kubectl get nodes {{ ansible_fqdn }} -o=jsonpath='{.status.nodeInfo.kubeletVersion}'"
  register: version_current_1st_master

# Сравниваем новую и текущую версию. Если они равны, ничего на этой ноде не делаем.
- name: Version check. 
  when: version_current_1st_master.stdout is match(".*" + kube_version)
  block:
    - name: Nothing todo
      debug: 
        msg: "Current cluster version {{ version_current_1st_master.stdout }} equal a new version in variables {{ kube_version }}"

    - name: Stop upgrade 1-st control
      meta: end_host

# Иначе обновим версию.
- name: Install packages dnf
  dnf:
    name:
      - kubectl-{{ kube_version }}-0.x86_64
      - kubelet-{{ kube_version }}-0.x86_64
      - kubeadm-{{ kube_version }}-0.x86_64
    state: latest
  when: ansible_facts['os_family'] == "RedHat"

- name: Drain node
  shell: 
    cmd: kubectl drain {{ ansible_fqdn }} --ignore-daemonsets

# - name: Sleep for 180 seconds
#   wait_for:
#     timeout: 60

- name: Upgrade master node
  shell: 
    cmd: "kubeadm upgrade apply v{{ kube_version }} -y"

- name: Restart kubelet
  systemd:
    state: restarted
    daemon_reload: yes
    name: kubelet

- name: Uncordon master node
  shell: 
    cmd: "kubectl uncordon {{ ansible_fqdn }}"